// Code generated by protoc-gen-go.
// source: event.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	Event
	Plugin
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_EventType int32

const (
	Event_COMMAND Event_EventType = 0
	Event_MESSAGE Event_EventType = 1
)

var Event_EventType_name = map[int32]string{
	0: "COMMAND",
	1: "MESSAGE",
}
var Event_EventType_value = map[string]int32{
	"COMMAND": 0,
	"MESSAGE": 1,
}

func (x Event_EventType) String() string {
	return proto.EnumName(Event_EventType_name, int32(x))
}
func (Event_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Event struct {
	EventType Event_EventType `protobuf:"varint,1,opt,name=eventType,enum=rippl.Event_EventType" json:"eventType,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Plugin struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Plugin) Reset()                    { *m = Plugin{} }
func (m *Plugin) String() string            { return proto.CompactTextString(m) }
func (*Plugin) ProtoMessage()               {}
func (*Plugin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Event)(nil), "rippl.Event")
	proto.RegisterType((*Plugin)(nil), "rippl.Plugin")
	proto.RegisterEnum("rippl.Event_EventType", Event_EventType_name, Event_EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Rippl service

type RipplClient interface {
	GetEvents(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (Rippl_GetEventsClient, error)
}

type ripplClient struct {
	cc *grpc.ClientConn
}

func NewRipplClient(cc *grpc.ClientConn) RipplClient {
	return &ripplClient{cc}
}

func (c *ripplClient) GetEvents(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (Rippl_GetEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Rippl_serviceDesc.Streams[0], c.cc, "/rippl.Rippl/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &ripplGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rippl_GetEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type ripplGetEventsClient struct {
	grpc.ClientStream
}

func (x *ripplGetEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Rippl service

type RipplServer interface {
	GetEvents(*Plugin, Rippl_GetEventsServer) error
}

func RegisterRipplServer(s *grpc.Server, srv RipplServer) {
	s.RegisterService(&_Rippl_serviceDesc, srv)
}

func _Rippl_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Plugin)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RipplServer).GetEvents(m, &ripplGetEventsServer{stream})
}

type Rippl_GetEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type ripplGetEventsServer struct {
	grpc.ServerStream
}

func (x *ripplGetEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Rippl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rippl.Rippl",
	HandlerType: (*RipplServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _Rippl_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2d, 0x4b, 0xcd,
	0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xca, 0x2c, 0x28, 0xc8, 0x51, 0x4a,
	0xe1, 0x62, 0x75, 0x05, 0x89, 0x0a, 0x99, 0x70, 0x71, 0x82, 0xa5, 0x43, 0x2a, 0x0b, 0x52, 0x25,
	0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0xc4, 0xf4, 0xc0, 0x6a, 0xf4, 0xc0, 0x0a, 0x20, 0x24, 0x48,
	0x36, 0x08, 0xa1, 0x50, 0x49, 0x95, 0x8b, 0x13, 0x2e, 0x2e, 0xc4, 0xcd, 0xc5, 0xee, 0xec, 0xef,
	0xeb, 0xeb, 0xe8, 0xe7, 0x22, 0xc0, 0x00, 0xe2, 0xf8, 0xba, 0x06, 0x07, 0x3b, 0xba, 0xbb, 0x0a,
	0x30, 0x2a, 0xc9, 0x70, 0xb1, 0x05, 0xe4, 0x94, 0xa6, 0x67, 0xe6, 0x09, 0x09, 0x71, 0xb1, 0xe4,
	0x25, 0xe6, 0x42, 0x6c, 0xe0, 0x0c, 0x02, 0xb3, 0x8d, 0x4c, 0xb9, 0x58, 0x83, 0x40, 0x16, 0x09,
	0xe9, 0x70, 0x71, 0xba, 0xa7, 0x96, 0x80, 0x0d, 0x2c, 0x16, 0xe2, 0x85, 0xda, 0x0e, 0xd1, 0x28,
	0xc5, 0x83, 0xec, 0x18, 0x25, 0x06, 0x03, 0x46, 0x27, 0x9e, 0x28, 0x2e, 0x3d, 0x3d, 0xfd, 0x9c,
	0xcc, 0x24, 0xfd, 0xa2, 0x82, 0xe4, 0x24, 0x36, 0xb0, 0xb7, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x98, 0x94, 0x5a, 0xbe, 0xe5, 0x00, 0x00, 0x00,
}
